(test (input_TCC1 0
       (input_TCC1-1 nil 3684518380 ("" (cond-disjoint-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (delta const-decl "posreal" test nil)
         (DTIME type-eq-decl nil Time nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil))
      (input_TCC2 0
       (input_TCC2-1 nil 3684518380 ("" (cond-coverage-tcc) nil nil)
        ((boolean nonempty-type-decl nil booleans nil)
         (bool nonempty-type-eq-decl nil booleans nil)
         (NOT const-decl "[bool -> bool]" booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (>= const-decl "bool" reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (nonneg_real nonempty-type-eq-decl nil real_types nil)
         (> const-decl "bool" reals nil)
         (posreal nonempty-type-eq-decl nil real_types nil)
         (delta const-decl "posreal" test nil)
         (DTIME type-eq-decl nil Time nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_lt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_ge_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        nil))
      (check0 0
       (check0-1 nil 3684518407
        ("" (expand "delta") (("" (propax) nil nil)) nil)
        ((delta const-decl "posreal" test nil)) shostak))
      (check1 0
       (check1-1 nil 3684518417
        ("" (iff)
         (("" (split)
           (("1" (flatten)
             (("1" (expand "held_for")
               (("1" (inst -1 0)
                 (("1" (expand "delta") (("1" (propax) nil nil)) nil))
                 nil))
               nil))
             nil)
            ("2" (flatten)
             (("2" (expand "hi")
               (("2" (expand "held_for")
                 (("2" (skeep)
                   (("2" (expand "delta")
                     (("2" (assert)
                       (("2" (expand "input") (("2" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((posreal_div_posreal_is_posreal application-judgement
          "posreal" real_types nil)
         (held_for const-decl "bool" Time nil)
         (delta const-decl "posreal" test nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil)
         (hi const-decl "bool" test nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (input const-decl "real" test nil))
        shostak))
      (check1a 0
       (check1a-1 nil 3684519464
        ("" (expand "hi")
         (("" (expand "input") (("" (assert) nil nil)) nil)) nil)
        ((input const-decl "real" test nil)
         (hi const-decl "bool" test nil))
        shostak))
      (check2 0
       (check2-1 nil 3684518729
        ("" (split)
         (("1" (iff)
           (("1" (split)
             (("1" (flatten)
               (("1" (split)
                 (("1" (expand "held_for")
                   (("1" (inst -1 0)
                     (("1" (assert)
                       (("1" (expand "delta") (("1" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil)
                  ("2" (expand "held_for")
                   (("2" (inst?)
                     (("2" (split)
                       (("1" (assert) nil nil) ("2" (assert) nil nil)
                        ("3" (assert) nil nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ("2" (flatten)
               (("2" (expand "held_for")
                 (("2" (skeep)
                   (("2" (split)
                     (("1" (assert)
                       (("1" (expand "delta")
                         (("1" (assert)
                           (("1" (expand "hi")
                             (("1" (assert)
                               (("1"
                                 (expand "input")
                                 (("1" (assert) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil)
                      ("2" (expand "delta")
                       (("2" (assert)
                         (("2" (expand "hi")
                           (("2" (expand "input")
                             (("2" (propax) nil nil)) nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil)
          ("2" (expand "held_for")
           (("2" (inst?)
             (("2" (split)
               (("1" (flatten)
                 (("1" (assert)
                   (("1" (expand "hi")
                     (("1" (assert)
                       (("1" (expand "input") (("1" (assert) nil nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil)
                ("2" (expand "delta") (("2" (assert) nil nil)) nil)
                ("3" (assert) nil nil))
               nil))
             nil))
           nil))
         nil)
        ((input const-decl "real" test nil)
         (hi const-decl "bool" test nil)
         (posreal_div_posreal_is_posreal application-judgement
          "posreal" real_types nil)
         (held_for const-decl "bool" Time nil)
         (real_minus_real_is_real application-judgement "real" reals
          nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (delta const-decl "posreal" test nil)
         (int nonempty-type-eq-decl nil integers nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (real nonempty-type-from-decl nil reals nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number nonempty-type-decl nil numbers nil))
        shostak))
      (check4 0
       (check4-1 nil 3684518984
        ("" (iff)
         (("" (split)
           (("1" (flatten)
             (("1" (split)
               (("1" (expand "held_for")
                 (("1" (inst?)
                   (("1" (split)
                     (("1" (flatten) nil nil)
                      ("2" (expand "delta") (("2" (assert) nil nil))
                       nil)
                      ("3" (assert) nil nil))
                     nil))
                   nil))
                 nil)
                ("2" (expand "held_for")
                 (("2" (inst?)
                   (("2" (split)
                     (("1" (flatten) nil nil)
                      ("2" (expand "delta") (("2" (assert) nil nil))
                       nil)
                      ("3" (assert) nil nil))
                     nil))
                   nil))
                 nil)
                ("3" (expand "held_for")
                 (("3" (inst?)
                   (("3" (split)
                     (("1" (flatten) nil nil)
                      ("2" (expand "delta") (("2" (assert) nil nil))
                       nil)
                      ("3" (assert) nil nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("2" (flatten)
             (("2" (expand "held_for")
               (("2" (skeep)
                 (("2" (split)
                   (("1" (assert)
                     (("1" (expand "delta") (("1" (propax) nil nil))
                       nil))
                     nil)
                    ("2" (expand "delta") (("2" (assert) nil nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (delta const-decl "posreal" test nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (held_for const-decl "bool" Time nil)
         (posreal_div_posreal_is_posreal application-judgement
          "posreal" real_types nil)
         (real_minus_real_is_real application-judgement "real" reals
          nil))
        shostak))
      (check5 0
       (check5-1 nil 3684519123
        ("" (iff)
         (("" (split)
           (("1" (flatten)
             (("1" (split)
               (("1" (expand "held_for")
                 (("1" (inst?)
                   (("1" (expand "delta") (("1" (propax) nil nil))
                     nil))
                   nil))
                 nil)
                ("2" (expand "held_for")
                 (("2" (inst?)
                   (("2" (expand "delta") (("2" (propax) nil nil))
                     nil))
                   nil))
                 nil)
                ("3" (expand "held_for")
                 (("3" (inst?)
                   (("3" (expand "delta") (("3" (propax) nil nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("2" (flatten)
             (("2" (expand "held_for")
               (("2" (skeep)
                 (("2" (expand "delta") (("2" (assert) nil nil)) nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (delta const-decl "posreal" test nil)
         (held_for const-decl "bool" Time nil)
         (posreal_div_posreal_is_posreal application-judgement
          "posreal" real_types nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        shostak))
      (check6 0
       (check6-1 nil 3684519305
        ("" (split)
         (("1" (iff)
           (("1" (split)
             (("1" (flatten)
               (("1" (expand "held_for")
                 (("1" (inst?)
                   (("1" (expand "delta")
                     (("1" (split)
                       (("1" (propax) nil nil)
                        ("2" (assert)
                         (("2" (expand "hi")
                           (("2" (expand "input")
                             (("2" (propax) nil nil)) nil))
                           nil))
                         nil)
                        ("3" (expand "hi")
                         (("3" (expand "input")
                           (("3" (propax) nil nil)) nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil)
              ("2" (flatten)
               (("2" (expand "held_for")
                 (("2" (skeep)
                   (("2" (expand "delta") (("2" (assert) nil nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil)
          ("2" (expand "held_for")
           (("2" (skeep)
             (("2" (expand "delta")
               (("2" (assert)
                 (("2" (expand "hi")
                   (("2" (expand "input") (("2" (propax) nil nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil)
         (number nonempty-type-decl nil numbers nil)
         (boolean nonempty-type-decl nil booleans nil)
         (number_field_pred const-decl "[number -> boolean]"
          number_fields nil)
         (number_field nonempty-type-from-decl nil number_fields nil)
         (real_pred const-decl "[number_field -> boolean]" reals nil)
         (real nonempty-type-from-decl nil reals nil)
         (rational_pred const-decl "[real -> boolean]" rationals nil)
         (rational nonempty-type-from-decl nil rationals nil)
         (integer_pred const-decl "[rational -> boolean]" integers nil)
         (int nonempty-type-eq-decl nil integers nil)
         (hi const-decl "bool" test nil)
         (input const-decl "real" test nil)
         (delta const-decl "posreal" test nil)
         (held_for const-decl "bool" Time nil)
         (posreal_div_posreal_is_posreal application-judgement
          "posreal" real_types nil))
        shostak))
      (check7 0
       (check7-1 nil 3684519441
        ("" (expand "hi")
         (("" (expand "input") (("" (propax) nil nil)) nil)) nil)
        ((input const-decl "real" test nil)
         (hi const-decl "bool" test nil))
        shostak)))

