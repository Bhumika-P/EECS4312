(alert
 (response_TCC1 0
  (response_TCC1-1 nil 3684491269
   ("" (skeep)
    (("" (split)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil)
       ("3" (flatten) nil nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (response_TCC2 0
  (response_TCC2-1 nil 3684491269
   ("" (skeep)
    (("" (split)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten) (("2" (assert) nil nil)) nil)
       ("3" (flatten) nil nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (response_TCC3 0
  (response_TCC3-1 nil 3684491269
   ("" (skeep)
    (("" (split) (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (response_TCC4 0
  (response_TCC4-1 nil 3684491269 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" alert nil)
    (DTIME type-eq-decl nil Time nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (response_TCC5 0
  (response_TCC5-1 nil 3684512985 ("" (cond-coverage-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" alert nil)
    (DTIME type-eq-decl nil Time nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (usecase1_lemma1 0
  (usecase1_lemma1-1 nil 3684493171
   ("" (flatten)
    (("" (expand "pre_uc1")
      (("" (expand "post_uc1")
        (("" (flatten)
          (("" (split)
            (("1" (expand "response" -6) (("1" (propax) nil nil)) nil)
             ("2" (expand "response" -8)
              (("2" (rewrite -8)
                (("2" (assert)
                  (("2" (expand "response")
                    (("2" (simplify)
                      (("2" (expand "held_for")
                        (("2" (rewrite -6) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (expand "response" -8)
              (("3" (rewrite -8)
                (("3" (expand "held_for")
                  (("3" (assert)
                    (("3" (expand "response") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (expand "response") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pre_uc1 const-decl "bool" alert nil)
    (held_for const-decl "bool" Time nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (response const-decl "bool" alert nil)
    (post_uc1 const-decl "bool" alert nil))
   shostak))
 (usecase1_lemma2 0
  (usecase1_lemma2-1 nil 3684492632
   ("" (flatten)
    (("" (split)
      (("1" (use "usecase1_lemma1")
        (("1" (split) (("1" (propax) nil nil) ("2" (propax) nil nil))
          nil))
        nil)
       ("2" (expand "pre_uc2")
        (("2" (flatten)
          (("2" (expand "response")
            (("2" (prop)
              (("1" (assert)
                (("1" (expand "held_for")
                  (("1" (inst -1 0)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "pre_uc1" -3)
                            (("1" (flatten)
                              (("1"
                                (expand "response")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "delta") (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("3" (use "usecase1_lemma1")
                        (("3" (split)
                          (("1" (expand "post_uc1")
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (assert)
                  (("2" (expand "held_for")
                    (("2" (skeep)
                      (("2" (expand "delta")
                        (("2" (assert)
                          (("2" (expand "pre_uc1" -4)
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "response")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((usecase1_lemma1 formula-decl nil alert nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (held_for const-decl "bool" Time nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pre_uc1 const-decl "bool" alert nil)
    (delta const-decl "posreal" alert nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (post_uc1 const-decl "bool" alert nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (response const-decl "bool" alert nil)
    (pre_uc2 const-decl "bool" alert nil))
   shostak))
 (usecase1 0
  (usecase1-1 nil 3684498302
   ("" (flatten)
    (("" (expand "pre_uc1")
      (("" (expand "pre_uc2")
        (("" (flatten)
          (("" (expand "response")
            (("" (expand "held_for")
              (("" (expand "delta")
                (("" (split)
                  (("1" (split 2)
                    (("1" (expand "post_uc1") (("1" (grind) nil nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil)
                   ("2" (grind) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pre_uc1 const-decl "bool" alert nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (held_for const-decl "bool" Time nil)
    (post_uc1 const-decl "bool" alert nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" alert nil)
    (response const-decl "bool" alert nil)
    (pre_uc2 const-decl "bool" alert nil))
   shostak))
 (usecase3 0
  (usecase3-1 nil 3684515027
   ("" (flatten)
    (("" (expand "pre_uc1")
      (("" (expand "pre_uc2")
        (("" (expand "pre_uc3")
          (("" (flatten)
            (("" (expand "response")
              (("" (expand "held_for")
                (("" (expand "delta")
                  (("" (split)
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (split 2)
                          (("1" (assert) nil nil) ("2" (grind) nil nil)
                           ("3" (flatten) (("3" (grind) nil nil)) nil)
                           ("4" (grind) nil nil))
                          nil)
                         ("2" (split)
                          (("1" (split 2)
                            (("1" (expand "post_uc1")
                              (("1"
                                (split)
                                (("1" (propax) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil)
                             ("3" (grind) nil nil)
                             ("4" (grind) nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pre_uc1 const-decl "bool" alert nil)
    (pre_uc3 const-decl "bool" alert nil)
    (response const-decl "bool" alert nil)
    (delta const-decl "posreal" alert nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (post_uc1 const-decl "bool" alert nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (held_for const-decl "bool" Time nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (pre_uc2 const-decl "bool" alert nil))
   shostak))
 (inv_holds 0
  (inv_holds-1 nil 3684517307
   ("" (flatten)
    (("" (skeep)
      (("" (inst?)
        (("" (expand "environment")
          (("" (expand "response")
            (("" (expand "invariant")
              (("" (flatten)
                (("" (expand "held_for")
                  (("" (expand "delta")
                    (("" (prop) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((environment const-decl "bool" alert nil)
    (invariant const-decl "bool" alert nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (held_for const-decl "bool" Time nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (response const-decl "bool" alert nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (DTIME type-eq-decl nil Time nil)
    (delta const-decl "posreal" alert nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (inv2_holds 0
  (inv2_holds-1 nil 3684517449
   ("" (flatten)
    (("" (expand "response")
      (("" (expand "invariant2")
        (("" (skeep 1)
          (("" (expand "danger")
            (("" (expand "held_for")
              (("" (case "i=0 OR i>0")
                (("1" (split)
                  (("1" (inst -3 "i-1") (("1" (grind) nil nil)) nil)
                   ("2" (grind) nil nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (response const-decl "bool" alert nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (held_for const-decl "bool" Time nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (delta const-decl "posreal" alert nil)
    (DTIME type-eq-decl nil Time nil)
    (danger const-decl "bool" alert nil)
    (invariant2 const-decl "bool" alert nil))
   shostak)))

