(date
 (date_valid_TCC1 0
  (date_valid_TCC1-1 nil 3683988656
   ("" (expand "leapyr")
    (("" (expand "member")
      (("" (expand "mod")
        (("" (expand "LEAP")
          (("" (assert)
            (("" (split)
              (("1" (expand "MONTH31")
                (("1" (expand "MONTH30")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (split)
                        (("1" (split)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil)
                           ("4" (assert) nil nil))
                          nil)
                         ("2" (split)
                          (("1" (assert) nil nil)
                           ("2" (assert) nil nil)
                           ("3" (assert) nil nil)
                           ("4" (assert) nil nil))
                          nil)
                         ("3" (assert) nil nil) ("4" (assert) nil nil)
                         ("5" (assert) nil nil) ("6" (assert) nil nil)
                         ("7" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "MONTH31") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "MONTH31")
                (("3" (flatten) (("3" (assert) nil nil)) nil)) nil)
               ("4" (flatten) (("4" (assert) nil nil)) nil)
               ("5" (assert)
                (("5" (expand "MONTH30")
                  (("5" (assert)
                    (("5" (flatten) (("5" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("6" (expand "MONTH30")
                (("6" (assert)
                  (("6" (flatten)
                    (("6" (split)
                      (("1" (assert) nil nil)
                       ("2" (split)
                        (("1" (assert) nil nil) ("2" (assert) nil nil)
                         ("3" (assert) nil nil) ("4" (assert) nil nil))
                        nil)
                       ("3" (assert) nil nil) ("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("7" (flatten) (("7" (assert) nil nil)) nil)
               ("8" (flatten)
                (("8" (assert)
                  (("8" (expand "MONTH30") (("8" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("9" (flatten) (("9" (assert) nil nil)) nil)
               ("10" (flatten)
                (("10" (assert)
                  (("10" (expand "MONTH30") (("10" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("11" (flatten) (("11" (assert) nil nil)) nil)
               ("12" (flatten) (("12" (assert) nil nil)) nil)
               ("13" (flatten) (("13" (assert) nil nil)) nil)
               ("14" (flatten) (("14" (assert) nil nil)) nil)
               ("15" (flatten) (("15" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nil application-judgement "below(m)" mod nil)
    (member const-decl "bool" sets nil)
    (LEAP const-decl "set[nat]" date nil)
    (MONTH30 const-decl "set[MONTH]" date nil)
    (MONTH31 const-decl "set[MONTH]" date nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (leapyr const-decl "bool" date nil))
   nil))
 (date_valid_TCC2 0
  (date_valid_TCC2-1 nil 3683988656 ("" (cond-coverage-tcc) nil nil)
   ((MONTH30 const-decl "set[MONTH]" date nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (LEAP const-decl "set[nat]" date nil)
    (member const-decl "bool" sets nil)
    (leapyr const-decl "bool" date nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nil application-judgement "below(m)" mod nil)
    (MONTH31 const-decl "set[MONTH]" date nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (set_conjecture1 0
  (set_conjecture1-1 nil 3683989656
   ("" (split)
    (("1" (expand "LEAP") (("1" (propax) nil nil)) nil)
     ("2" (expand "LEAP") (("2" (propax) nil nil)) nil)
     ("3" (expand "LEAP")
      (("3" (expand "member") (("3" (propax) nil nil)) nil)) nil))
    nil)
   ((member const-decl "bool" sets nil)
    (LEAP const-decl "set[nat]" date nil))
   shostak))
 (conj1 0
  (conj1-1 nil 3683988991
   ("" (expand "leapyr")
    (("" (flatten)
      (("" (expand "member")
        (("" (expand "LEAP")
          (("" (flatten)
            (("" (expand "mod") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((LEAP const-decl "set[nat]" date nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (member const-decl "bool" sets nil)
    (nil application-judgement "below(m)" mod nil)
    (leapyr const-decl "bool" date nil))
   shostak))
 (conj3 0
  (conj3-1 nil 3683989532
   ("" (expand "leapyr")
    (("" (flatten)
      (("" (expand "member")
        (("" (expand "LEAP")
          (("" (assert)
            (("" (expand "mod") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((LEAP const-decl "set[nat]" date nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (member const-decl "bool" sets nil)
    (nil application-judgement "below(m)" mod nil)
    (leapyr const-decl "bool" date nil))
   shostak))
 (conj4 0
  (conj4-1 nil 3683989574
   ("" (expand "leapyr")
    (("" (split)
      (("1" (expand "mod") (("1" (assert) nil nil)) nil)
       ("2" (expand "member")
        (("2" (expand "LEAP")
          (("2" (expand "mod") (("2" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (LEAP const-decl "set[nat]" date nil)
    (member const-decl "bool" sets nil)
    (leapyr const-decl "bool" date nil))
   shostak))
 (date_validity_check1 0
  (date_validity_check1-1 nil 3683989703
   ("" (flatten)
    (("" (expand "date_valid")
      (("" (expand "leapyr")
        (("" (expand "member")
          (("" (expand "LEAP")
            (("" (expand "mod") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((date_valid const-decl "bool" date nil)
    (nil application-judgement "below(m)" mod nil)
    (member const-decl "bool" sets nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (LEAP const-decl "set[nat]" date nil)
    (leapyr const-decl "bool" date nil))
   shostak))
 (date_validity_check2 0
  (date_validity_check2-1 nil 3683988657
   ("" (flatten)
    (("" (expand "date_valid")
      (("" (expand "leapyr")
        (("" (expand "member")
          (("" (expand "LEAP")
            (("" (expand "mod")
              (("" (assert)
                (("" (split)
                  (("1" (flatten)
                    (("1" (split)
                      (("1" (assert) nil nil) ("2" (assert) nil nil))
                      nil))
                    nil)
                   ("2" (split)
                    (("1" (assert) nil nil) ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((date_valid const-decl "bool" date nil)
    (nil application-judgement "below(m)" mod nil)
    (member const-decl "bool" sets nil)
    (nonneg_floor_is_nat application-judgement "nat" floor_ceil nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (LEAP const-decl "set[nat]" date nil)
    (leapyr const-decl "bool" date nil))
   shostak))
 (test 0
       (test-1 nil 3684198046
        ("" (flatten)
         (("" (split)
           (("1" (expand "date_valid")
             (("1" (expand "leapyr")
               (("1" (expand "member")
                 (("1" (expand "mod")
                   (("1" (expand "LEAP")
                     (("1" (assert)
                       (("1" (expand "MONTH31")
                         (("1" (expand "MONTH30")
                           (("1" (assert)
                             (("1" (simplify) (("1" (propax) nil nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil)
            ("2" (expand "date_valid")
             (("2" (expand "leapyr")
               (("2" (expand "member")
                 (("2" (expand "LEAP")
                   (("2" (simplify)
                     (("2" (expand "mod")
                       (("2" (expand "MONTH31")
                         (("2" (expand "MONTH30")
                           (("2" (simplify)
                             (("2" (assert)
                               (("2"
                                 (simplify)
                                 (("2" (propax) nil nil))
                                 nil))
                               nil))
                             nil))
                           nil))
                         nil))
                       nil))
                     nil))
                   nil))
                 nil))
               nil))
             nil))
           nil))
         nil)
        ((leapyr const-decl "bool" date nil)
         (nonneg_floor_is_nat application-judgement "nat" floor_ceil
          nil)
         (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
          integers nil)
         (even_times_int_is_even application-judgement "even_int"
          integers nil)
         (mult_divides1 application-judgement "(divides(n))" divides
          nil)
         (mult_divides2 application-judgement "(divides(m))" divides
          nil)
         (int_minus_int_is_int application-judgement "int" integers
          nil)
         (mod const-decl "{k | abs(k) < abs(j)}" mod nil)
         (MONTH30 const-decl "set[MONTH]" date nil)
         (posrat_div_posrat_is_posrat application-judgement "posrat"
          rationals nil)
         (MONTH31 const-decl "set[MONTH]" date nil)
         (LEAP const-decl "set[nat]" date nil)
         (member const-decl "bool" sets nil)
         (nil application-judgement "below(m)" mod nil)
         (date_valid const-decl "bool" date nil)
         (real_gt_is_strict_total_order name-judgement
          "(strict_total_order?[real])" real_props nil)
         (real_le_is_total_order name-judgement "(total_order?[real])"
          real_props nil))
        shostak)))

